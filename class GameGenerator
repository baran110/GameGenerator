package com.baran.barangames

import android.graphics.Color
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.PopupMenu
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.RecyclerView
import com.baran.barangames.databinding.GameListItemBinding
import com.google.android.material.snackbar.Snackbar

class GameListAdapter(private val listener: GameListListener) :
    RecyclerView.Adapter<GameListAdapter.GameViewHolder>() {

    private var gameList = mutableListOf<GameList>()

    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): GameViewHolder {
        val binding = GameListItemBinding.inflate(LayoutInflater.from(parent.context), parent, false)
        return GameViewHolder(binding)
    }

    override fun onBindViewHolder(holder: GameViewHolder, position: Int) {
        holder.bind(gameList[position])
    }

    override fun getItemCount() = gameList.size

    fun addGame(game: GameList) {
        gameList.add(game)
        notifyItemInserted(gameList.size - 1)
    }

    inner class GameViewHolder(private val binding: GameListItemBinding) :
        RecyclerView.ViewHolder(binding.root) {

        fun bind(game: GameList) {
            with(binding) {
                mainHolder.setOnClickListener {
                    listener.onClick(game)
                }
                mainHolder.setOnLongClickListener {
                    showFilterOptions(binding.mainHolder)
                }
                itemView.setOnClickListener { listener.onClick(game) }
                setMainTextSize(game.title.length)
                setTypeTextSize(game.category[0].length)
                setCardBackgroundColor(game.isOnline)
                setYearText(game.year.toString())
                setMainImage(game.imageId)
                setMainText(game.title)
                setRequirementsText(game.requirements)
                setType2Text(game.is3d)
                setTimeText1(game.time.toString())
                setMainNumberText(game.elementNumber)
            }
        }

        private fun setMainTextSize(titleLength: Int) {
            binding.mainText.textSize = when (titleLength) {
                in 20..23 -> 13f
                in 24..26 -> 12f
                in 27..29 -> 11f
                in 30..100 -> 10f
                else -> 14f
            }
        }

        private fun setTypeTextSize(categoryLength: Int) {
            binding.typeText.textSize = when (categoryLength) {
                in 12..14 -> 7.5f
                in 15..17 -> 6.5f
                in 18..30 -> 5f
                else -> 9f
            }
        }

        private fun setCardBackgroundColor(isOnline: Array<String>) {
            binding.elementNumberCard.setCardBackgroundColor(
                when {
                    Constance.onlineTempText in isOnline && Constance.localTempText in isOnline -> Color.parseColor("#9C27B0")
                    Constance.onlineTempText in isOnline -> Color.parseColor("#03A9F4")
                    else -> Color.parseColor("#669800")
                }
            )
        }

        private fun setYearText(year: String) {
            binding.yearText.text = "${year.replace("0..","")} ${Constance.yearTempText}"
        }

        private fun setMainImage(imageId: Int) {
            binding.mainImage.setImageResource(imageId)
        }

        private fun setMainText(title: String) {
            binding.mainText.text = title
        }

        private fun setRequirementsText(requirements: String) {
            binding.requirementsText.text = requirements
        }

        private fun setType2Text(is3d: String) {
            binding.type2Text.text = is3d
        }

        private fun setTimeText1(time: String) {
            binding.timeText1.text = "${time.replace("0..","")} ${Constance.timeTempText}"
        }

        private fun setMainNumberText(elementNumber: Int) {
            binding.mainNumber.text = elementNumber.toString()
        }
    }

    private fun showFilterOptions(filterButton: View): Boolean {
        val popupMenu = PopupMenu(filterButton.context, filterButton)
        popupMenu.menuInflater.inflate(R.menu.filter_menu, popupMenu.menu)
        popupMenu.setOnMenuItemClickListener { menuItem ->
            when (menuItem.itemId) {
                R.id.add_to_marks -> {
                    Snackbar.make(filterButton, "Добавлено в закладки!", Snackbar.LENGTH_SHORT).show()
                    true
                }
                else -> false
            }
        }
        popupMenu.show()
        return true
    }

    interface GameListListener {
        fun onClick(game: GameList)
    }
}
